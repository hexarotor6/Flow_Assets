Subscribed Topics
scan (sensor_msgs/LaserScan)

    Laser scans. 

tf (tf/tfMessage)

    Transforms. 

initialpose (geometry_msgs/PoseWithCovarianceStamped)

    Mean and covariance with which to (re-)initialize the particle filter. 

map (nav_msgs/OccupancyGrid)

    When the use_map_topic parameter is set, AMCL subscribes to this topic to retrieve the map used for laser-based localization. New in navigation 1.4.2. 

Published Topics
amcl_pose (geometry_msgs/PoseWithCovarianceStamped)

    Robot's estimated pose in the map, with covariance. 

particlecloud (geometry_msgs/PoseArray)

    The set of pose estimates being maintained by the filter. 

tf (tf/tfMessage)

    Publishes the transform from odom (which can be remapped via the ~odom_frame_id parameter) to map. 

Services
global_localization (std_srvs/Empty)

    Initiate global localization, wherein all particles are dispersed randomly through the free space in the map. 

request_nomotion_update (std_srvs/Empty)

    Service to manually perform update and publish updated particles. 

set_map (nav_msgs/SetMap)

    Service to manually set a new map and pose. 

Services Called
static_map (nav_msgs/GetMap)

    amcl calls this service to retrieve the map that is used for laser-based localization; startup blocks on getting the map from this service. 

Parameters


~min_particles (int, default: 100)

    Minimum allowed number of particles. 

~max_particles (int, default: 5000)

    Maximum allowed number of particles. 

~kld_err (double, default: 0.01)

    Maximum error between the true distribution and the estimated distribution. 

~kld_z (double, default: 0.99)

    Upper standard normal quantile for (1 - p), where p is the probability that the error on the estimated distrubition will be less than kld_err. 

~update_min_d (double, default: 0.2 meters)

    Translational movement required before performing a filter update. 

~update_min_a (double, default: π/6.0 radians)

    Rotational movement required before performing a filter update. 

~resample_interval (int, default: 2)

    Number of filter updates required before resampling. 

~transform_tolerance (double, default: 0.1 seconds)

    Time with which to post-date the transform that is published, to indicate that this transform is valid into the future. 

~recovery_alpha_slow (double, default: 0.0 (disabled))

    Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001. 

~recovery_alpha_fast (double, default: 0.0 (disabled))

    Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1. 

~initial_pose_x (double, default: 0.0 meters)

    Initial pose mean (x), used to initialize filter with Gaussian distribution. 

~initial_pose_y (double, default: 0.0 meters)

    Initial pose mean (y), used to initialize filter with Gaussian distribution. 

~initial_pose_a (double, default: 0.0 radians)

    Initial pose mean (yaw), used to initialize filter with Gaussian distribution. 

~initial_cov_xx (double, default: 0.5*0.5 meters)

    Initial pose covariance (x*x), used to initialize filter with Gaussian distribution. 

~initial_cov_yy (double, default: 0.5*0.5 meters)

    Initial pose covariance (y*y), used to initialize filter with Gaussian distribution. 

~initial_cov_aa (double, default: (π/12)*(π/12) radian)

    Initial pose covariance (yaw*yaw), used to initialize filter with Gaussian distribution. 

~gui_publish_rate (double, default: -1.0 Hz)

    Maximum rate (Hz) at which scans and paths are published for visualization, -1.0 to disable. 

~save_pose_rate (double, default: 0.5 Hz)

    Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*. This saved pose will be used on subsequent runs to initialize the filter. -1.0 to disable. 

~use_map_topic (bool, default: false)

    When set to true, AMCL will subscribe to the map topic rather than making a service call to receive its map. New in navigation 1.4.2 

~first_map_only (bool, default: false)

    When set to true, AMCL will only use the first map it subscribes to, rather than updating each time a new one is received. New in navigation 1.4.2 

~selective_resampling (bool, default: false)

    When set to true, will reduce the resampling rate when not needed and help avoid particle deprivation. The resampling will only happen if the effective number of particles (N_eff = 1/(sum(k_i^2))) is lower than half the current number of particles. Reference: Grisetti, Giorgio, Cyrill Stachniss, and Wolfram Burgard. "Improved techniques for grid mapping with rao-blackwellized particle filters." IEEE transactions on Robotics 23.1 (2007): 34. 


~laser_min_range (double, default: -1.0)

    Minimum scan range to be considered; -1.0 will cause the laser's reported minimum range to be used. 

~laser_max_range (double, default: -1.0)

    Maximum scan range to be considered; -1.0 will cause the laser's reported maximum range to be used. 

~laser_max_beams (int, default: 30)

    How many evenly-spaced beams in each scan to be used when updating the filter. 

~laser_z_hit (double, default: 0.95)

    Mixture weight for the z_hit part of the model. 

~laser_z_short (double, default: 0.1)

    Mixture weight for the z_short part of the model. 

~laser_z_max (double, default: 0.05)

    Mixture weight for the z_max part of the model. 

~laser_z_rand (double, default: 0.05)

    Mixture weight for the z_rand part of the model. 

~laser_sigma_hit (double, default: 0.2 meters)

    Standard deviation for Gaussian model used in z_hit part of the model. 

~laser_lambda_short (double, default: 0.1)

    Exponential decay parameter for z_short part of model. 

~laser_likelihood_max_dist (double, default: 2.0 meters)

    Maximum distance to do obstacle inflation on map, for use in likelihood_field model. 

~laser_model_type (string, default: "likelihood_field")

    Which model to use, either beam, likelihood_field, or likelihood_field_prob (same as likelihood_field but incorporates the beamskip feature, if enabled). 
